pipeline {
  agent {
    kubernetes {
      label 'cassandra'
      defaultContainer 'jnlp'
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            jenkins: label
        spec:
          initContainers:
            - name: init-docker-socket
              image: alpine:latest
              imagePullPolicy: Always
              command:
                - sh
                - -c
                - chown 1000:1000 /var/run/docker.sock
              volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
              securityContext:
                runAsUser: 0
          containers:
          - name: jnlp
            image: richamishra006/apache-k8s-agent:32
            command:
              - /bin/sh 
              - -c
              - /usr/local/bin/jenkins-agent
            volumeMounts:
            - name: docker-socket
              mountPath: /var/run/docker.sock   
            tty: true
            securityContext:
              privileged: true
          nodeSelector:
            gke-node: first
          volumes:
          - name: docker-socket
            hostPath:
              path: /var/run/docker.sock
        '''
    }
  }
parameters {
  choice(
    choices: ['Init', 'lint', 'debian', 'redhat', 'centos7', 'stress', 'fqltool', 'Summary'],
    description: 'Select the stage to run',
    name: 'STAGE_TO_RUN'
  )
}
  options {
    githubProjectProperty('https://github.com/apache/cassandra')
    parallelsAlwaysFailFast()
    timestamps()
  }
  environment {
    javaVersionDefault = javaVersionDefault()
    javaVersionsSupported = javaVersionsSupported()
    PIPELINE_SCRIPT_DEBUG = 'true'
  }
  stages {
    stage('Select Stage') {
      steps {
        script {
          if (params.STAGE_TO_RUN == 'Init') {
            buildInitStage()
          } else if (params.STAGE_TO_RUN == 'lint') {
            buildLintStage()
          } else if (params.STAGE_TO_RUN == 'debian') {
            buildDebianStage()
          }
          // Add similar conditions for other stages
        }
      }
    }
  }
}

def buildInitStage() {
  stage('Init') {
    steps {
      container('jnlp') {
        script { currentBuild.result = 'SUCCESS' }
        sh 'echo "stage init"'
      }
    }
  }
}

def buildLintStage() {
  stage('lint') {
    steps {
      // Your lint stage logic here
      sh 'echo "stage lint"'
    }
  }
}

def buildDebianStage() {
  stage('debian') {
    steps {
      // Your debian stage logic here
      sh 'echo "stage debian"'
    }
  }
}
